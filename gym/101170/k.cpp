#include <bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define pb push_back
#define cl(x,v) memset((x), (v), sizeof(x))
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define _ << ", " <<

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int, pii> piii;
typedef pair<ll,ll> pll;
typedef pair<ll, pll> plll;
typedef vector<int> vi;
typedef vector <vi> vii;

const ld EPS = 1e-9, PI = acos(-1.);
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f, MOD = 1e9+7;
const int N = 1e5+5;

typedef long double type;
//for big coordinates change to long long

bool ge(type x, type y) { return x + EPS > y; }
bool le(type x, type y) { return x - EPS < y; }
bool eq(type x, type y) { return ge(x, y) and le(x, y); }
int sign(type x) { return ge(x, 0) - le(x, 0); }

struct point {
    type x, y;
    

    point() : x(0), y(0) {}
    point(type x, type y) : x(x), y(y) {}

    point operator -() { return point(-x, -y); }
    point operator +(point p) { return point(x + p.x, y + p.y); }
    point operator -(point p) { return point(x - p.x, y - p.y); }

    point operator *(type k) { return point(k*x, k*y); }
    point operator /(type k) { return point(x/k, y/k); }

    //inner product
    type operator *(point p) { return x*p.x + y*p.y; }
    //cross product
    type operator %(point p) { return x*p.y - y*p.x; }

    bool operator ==(const point &p) const{ return x == p.x and y == p.y; }
    bool operator !=(const point &p) const{ return x != p.x  or y != p.y; }
    bool operator <(const point &p) const { return (x < p.x) or (x == p.x and y < p.y); }

    // 0 => same direction
    // 1 => p is on the left 
    //-1 => p is on the right    
    int dir(point o, point p) {
        type x = (*this - o) % (p - o);
        return ge(x,0) - le(x,0);
    }

    bool on_seg(point p, point q) {
        if (this->dir(p, q)) return 0;
        return ge(x, min(p.x, q.x)) and le(x, max(p.x, q.x)) and ge(y, min(p.y, q.y)) and le(y, max(p.y, q.y));
    }

    ld abs() { return sqrt(x*x + y*y); }
    type abs2() { return x*x + y*y; }
    ld dist(point q) { return (*this - q).abs(); }
    type dist2(point q) { return (*this - q).abs2(); }

    ld arg() { return atan2l(y, x); }

    // Project point on vector y
    point project(point y) { return y * ((*this * y) / (y * y)); }

    // Project point on line generated by points x and y
    point project(point x, point y) { return x + (*this - x).project(y-x); }

    ld dist_line(point x, point y) { return dist(project(x, y)); }

    ld dist_seg(point x, point y) {
        return project(x, y).on_seg(x, y) ? dist_line(x, y) :  min(dist(x), dist(y));
    }

    point rotate(ld sin, ld cos) { return point(cos*x - sin*y, sin*x + cos*y); }
    point rotate(ld a) { return rotate(sin(a), cos(a)); }

    // rotate around the argument of vector p
    point rotate(point p) { return rotate(p.y / p.abs(), p.x / p.abs()); }

};

int direction(point o, point p, point q) { return p.dir(o, q); }

point rotate_ccw90(point p)   { return point(-p.y,p.x); }
point rotate_cw90(point p)    { return point(p.y,-p.x); }

//for reading purposes avoid using * and % operators, use the functions below:
type dot(point p, point q)     { return p.x*q.x + p.y*q.y; }
type cross(point p, point q)   { return p.x*q.y - p.y*q.x; }

//double area
type area_2(point a, point b, point c) { return cross(a,b) + cross(b,c) + cross(c,a); }

int angle_less(const point& a1, const point& b1, const point& a2, const point& b2) {
    //angle between (a1 and b1) vs angle between (a2 and b2)
    //1  : bigger
    //-1 : smaller
    //0  : equal
    point p1(dot(   a1, b1), abs(cross(   a1, b1)));
    point p2(dot(   a2, b2), abs(cross(   a2, b2)));
    if(cross(p1, p2) < 0) return 1;
    if(cross(p1, p2) > 0) return -1;
    return 0;
}

ostream &operator<<(ostream &os, const point &p) {
    os << "(" << p.x << "," << p.y << ")"; 
    return os;
}

type angle_between(point p, point q){
    return acos(dot(p, q) / (p.abs() * q.abs()));
}

struct circle{
    point c;
    ld r;
    circle(){c = point(); r = 0;}
    circle(point _c, ld _r) : c(_c), r(_r){}
    bool intersect(circle other){
        return (!ge(c.dist(other.c), r + other.r));
    }
};

point project_point_line(point c, point a, point b) {
    ld r = dot(b - a,b - a);
    if (fabs(r) < EPS) return a;
    return a + (b - a)*dot(c - a, b - a)/dot(b - a, b - a);
}

ld distance_point_line(point c, point a, point b) {
    return c.dist2(project_point_line(c, a, b));
}

vector<point> circle_line_intersection(point a, point b, point c, ld r) {
    vector<point> ret;
    if(ge(distance_point_line(c, a, b), r * r)) return ret;
    b = b - a;
    a = a - c;
    ld A = dot(b, b);
    ld B = dot(a, b);
    ld C = dot(a, a) - r*r;
    ld D = B*B - A*C;
    if (D < -EPS) return ret;
        ret.push_back(c + a + b*(sqrt(D) - B)/A);
    if (D > EPS)
        ret.push_back(c + a + b*(-B - sqrt(D))/A);
    return ret;
}

point pts[N];
circle circ[2][N];
int n;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> pts[i].x >> pts[i].y;
        pts[i].x /= 1000;
        pts[i].y /= 1000;
        pts[i + n] = pts[i];
    }
    for(int i = 0; i < 2; i++){
        for(int j = 1; j <= n; j++){
            point u = (pts[j - 1] - pts[j]);
            point v = (pts[j + 1] - pts[j]);
            //pts[i] is on the right, obtuse angle!
            if(pts[j + 1].dir(pts[j - 1], pts[j]) == -1) continue;
            //angle between the edges
            ld angle = angle_between(u, v);
            //unitary vector in the direction of the center
            point dir = u.rotate(angle/2);
            dir = dir / dir.abs();
            //distance from point p
            ld distance = 4.0 / sin(angle / 2);
            //create circle for that point
            circle tmp = circle(pts[j] + dir * distance, 4.0);
            bool ok = true;
            for(int k = 1; k <= n; k++){
                if(k == j or k == j - 1) continue;
                vector<point> inter = circle_line_intersection(pts[k], pts[k + 1], tmp.c, tmp.r);
                for(auto i : inter) if(i.on_seg(pts[k], pts[k + 1])) ok = false;
            }
            if(ok) circ[i][j] = tmp;
        }
    }
    pii ans = {-1, -1};
    for(int i = 1; i <= n; i++){
        if(eq(circ[0][i].r, 0)) continue;
        for(int j = i + 1; j <= n; j++){
            if(eq(circ[1][j].r, 0)) continue;
            if(!circ[0][i].intersect(circ[1][j])) ans = {i,  j};
        }
    }
    if(ans.st != -1){
        cout << setprecision(15) << fixed << circ[0][ans.st].c.x * 1000 << " " << circ[0][ans.st].c.y * 1000 << "\n";
        cout << setprecision(15) << fixed << circ[1][ans.nd].c.x * 1000 << " " << circ[1][ans.nd].c.y * 1000 << "\n";
    }
    else cout << "impossible\n";
    return 0;
}