#include <bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define pb push_back
#define cl(x,v) memset((x), (v), sizeof(x))
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define _ << ", " <<

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int, pii> piii;
typedef pair<ll,ll> pll;
typedef pair<ll, pll> plll;
typedef vector<int> vi;
typedef vector <vi> vii;

const ld EPS = 1e-9, PI = acos(-1.);
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f, MOD = 1e9+7;
const int N = 1e5+5;

typedef long long type;
//for big coordinates change to long long

//BASICS

bool ge(type x, type y) { return x + EPS > y; }
bool le(type x, type y) { return x - EPS < y; }
bool eq(type x, type y) { return ge(x, y) and le(x, y); }

struct point {
    type x, y;

    point() : x(0), y(0) {}
    point(type x, type y) : x(x), y(y) {}

    point operator -() { return point(-x, -y); }
    point operator +(point p) { return point(x+p.x, y+p.y); }
    point operator -(point p) { return point(x-p.x, y-p.y); }

    point operator *(type k) { return point(k*x, k*y); }
    point operator /(type k) { return point(x/k, y/k); }

    type operator *(point p) { return x*p.x + y*p.y; }
    type operator %(point p) { return x*p.y - y*p.x; }

    bool operator ==(point p) { return x == p.x and y == p.y; }
    bool operator !=(point p) { return x != p.x  or y != p.y; }
    bool operator <(const point p) const { return (x < p.x) or (x == p.x and y < p.y); }

    int dir(point o, point p) {
    type x = (*this - o) % (p - o);
    return ge(x,0) - le(x,0);
    }

    bool on_seg(point p, point q) {
        if (this->dir(p, q)) return 0;
        return ge(x, min(p.x, q.x)) and le(x, max(p.x, q.x)) and
            ge(y, min(p.y, q.y)) and le(y, max(p.y, q.y));
    }

    ld abs() { return sqrt(x*x + y*y); }
    type abs2() { return x*x + y*y; }
    ld dist(point q) { return (*this - q).abs(); }
    type dist2(point q) { return (*this - q).abs2(); }

    ld arg() { return atan2l(y, x); }

    // Project point on vector y
    point project(point y) { return y * ((*this * y) / (y * y)); }

    // Project point on line generated by points x and y
    point project(point x, point y) { return x + (*this - x).project(y-x); }

    ld dist_line(point x, point y) { return dist(project(x, y)); }

    ld dist_seg(point x, point y) {
    return project(x, y).on_seg(x, y) ? dist_line(x, y) :  min(dist(x), dist(y));
    }

    point rotate(ld sin, ld cos) { return point(cos*x-sin*y, sin*x+cos*y); }
    point rotate(ld a) { return rotate(sin(a), cos(a)); }
    // rotate around the argument of vector p
    point rotate(point p) { return rotate(p.x / p.abs(), p.y / p.abs()); }
};


point RotateCCW90(point p)   { return point(-p.y,p.x); }
point RotateCW90(point p)    { return point(p.y,-p.x); }

ld dot(point p, point q)     { return p.x*q.x+p.y*q.y; }
ld cross(point p, point q)   { return p.x*q.y-p.y*q.x; }

type area2(point a, point b, point c) { return cross(a,b) + cross(b,c) + cross(c,a); }

ostream &operator<<(ostream &os, const point &p) {
    os << "(" << p.x << "," << p.y << ")"; 
    return os;
}

int direction(point o, point p, point q) { return p.dir(o, q); }
point origin;

int above(point p){
    if(p.y == origin.y) return p.x > origin.x;
    return p.y > origin.y;
}

bool cmp(pair<point, pii> a, pair<point, pii> b){
    point p = a.st, q = b.st;
    int tmp = above(q) - above(p);
    if(tmp) return tmp > 0;
    return p.dir(origin,q) > 0;
    //Be Careful: p.dir(origin,q) == 0
}

bool SegmentSegmentIntersect(point a, point b, point c, point d) {
    if (a.dist2(c) < EPS || a.dist2(d) < EPS ||
        b.dist2(c) < EPS || b.dist2(d) < EPS) return true;
    int d1, d2, d3, d4;
    d1 = direction(a, b, c);
    d2 = direction(a, b, d);
    d3 = direction(c, d, a);
    d4 = direction(c, d, b);
    if (d1*d2 < 0 and d3*d4 < 0) return 1;
    return a.on_seg(c, d) or b.on_seg(c, d) or
            c.on_seg(a, b) or d.on_seg(a, b);
}

int s, k , w;
ll ans[N];
point kid[N];
pair <point, point> wall[N];

bool cmp2(int a, int b){
    point u = wall[a].st, v = wall[a].nd;
    point p = wall[b].st, q = wall[b].nd;
    //if u comes first (radially) than p, if u-v intersects origin - p than, u - v comes first, because its closer
    if (cross(u - origin, p - origin) > 0) return SegmentSegmentIntersect(u, v, origin, p);
    //else (p comes first than u), if p - q intersects u - origin, than p - q comes first, because its closer
    return !SegmentSegmentIntersect(u, origin, p, q);
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //read
    while(cin >> s >> k >> w){
        for(int i = 0; i < k; i++){
            cin >> kid[i].x >> kid[i].y;
        }
        for(int i = 0; i < w; i++){
            cin >> wall[i].st.x >> wall[i].st.y;
            cin >> wall[i].nd.x >> wall[i].nd.y;
        }
        //sweep
        for(int i = 0; i < s; i++){
            //init
            origin = kid[i];
            ans[i] = 0;
            //point, type, id
            vector <pair<point, pii>> sweep;
            //2 for children in sweep
            for(int j = 0; j < k; j++){
                if(i != j) sweep.pb({kid[j], {2, j}});
            }
            //0 for opening wall, 1 for closing wall
            for(int j = 0; j < w; j++){
                //if order is reversed, swap it
                if(wall[j].st.dir(origin, wall[j].nd) < 0) swap(wall[j].st, wall[j].nd);
                sweep.pb({wall[j].st, {0, j}});
                sweep.pb({wall[j].nd, {1, j}});
            }
            //sort points radially with respect to the origin, the kid
            sort(sweep.begin(), sweep.end(), cmp);
            //order segments on set
            set<int,bool(*)(int,int)> ps(cmp2);
            //look for walls that are already closing view
            for(auto q : sweep){
                if(q.nd.st == 0) ps.insert(q.nd.nd);
                if(q.nd.st == 1) if(ps.count(q.nd.nd)) ps.erase(q.nd.nd);
            }
            //radial sweep: look for kids that are not being blocked by view
            for(auto q : sweep){
                if(q.nd.st == 2){
                    if(!ps.size()) ans[i]++;
                    //if the segment origin - kid does not intersect the closest wall, than the kid is being seen
                    else if(!SegmentSegmentIntersect(origin, q.st, wall[*ps.begin()].st, wall[*ps.begin()].nd)) ans[i]++;
                }
                else if(q.nd.st == 0) ps.insert(q.nd.nd);
                else if(ps.count(q.nd.nd)) ps.erase(q.nd.nd);
            }
        }
        for(int i = 0; i < s; i++) cout << ans[i] << "\n";
    }
    return 0;
}