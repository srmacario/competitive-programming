#include <bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define pb push_back
#define cl(x,v) memset((x), (v), sizeof(x))
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define _ << ", " <<

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int, pii> piii;
typedef pair<ll,ll> pll;
typedef pair<ll, pll> plll;
typedef vector<int> vi;
typedef vector <vi> vii;

const ld EPS = 1e-9, PI = acos(-1.);
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f, MOD = 1e9+7;
const int N = 1e5+5;

typedef long double type;
//for big coordinates change to long long

bool ge(type x, type y) { return x + EPS > y; }
bool le(type x, type y) { return x - EPS < y; }
bool eq(type x, type y) { return ge(x, y) and le(x, y); }

struct point {
    type x, y;

    point() : x(0), y(0) {}
    point(type x, type y) : x(x), y(y) {}

    point operator -() { return point(-x, -y); }
    point operator +(point p) { return point(x + p.x, y + p.y); }
    point operator -(point p) { return point(x - p.x, y - p.y); }

    point operator *(type k) { return point(k*x, k*y); }
    point operator /(type k) { return point(x/k, y/k); }

    //inner product
    type operator *(point p) { return x*p.x + y*p.y; }
    //cross product
    type operator %(point p) { return x*p.y - y*p.x; }

    bool operator ==(const point &p) const{ return x == p.x and y == p.y; }
    bool operator !=(const point &p) const{ return x != p.x  or y != p.y; }
    bool operator <(const point &p) const { return (x < p.x) or (x == p.x and y < p.y); }

    // 0 => same direction
    // 1 => p is on the left 
    //-1 => p is on the right    
    int dir(point o, point p) {
        type x = (*this - o) % (p - o);
        return ge(x,0) - le(x,0);
    }

    bool on_seg(point p, point q) {
        if (this->dir(p, q)) return 0;
        return ge(x, min(p.x, q.x)) and le(x, max(p.x, q.x)) and ge(y, min(p.y, q.y)) and le(y, max(p.y, q.y));
    }

    ld abs() { return sqrt(x*x + y*y); }
    type abs2() { return x*x + y*y; }
    ld dist(point q) { return (*this - q).abs(); }
    type dist2(point q) { return (*this - q).abs2(); }

    ld arg() { return atan2l(y, x); }

    // Project point on vector y
    point project(point y) { return y * ((*this * y) / (y * y)); }

    // Project point on line generated by points x and y
    point project(point x, point y) { return x + (*this - x).project(y-x); }

    ld dist_line(point x, point y) { return dist(project(x, y)); }

    ld dist_seg(point x, point y) {
        return project(x, y).on_seg(x, y) ? dist_line(x, y) :  min(dist(x), dist(y));
    }

    point rotate(ld sin, ld cos) { return point(cos*x - sin*y, sin*x + cos*y); }
    point rotate(ld a) { return rotate(sin(a), cos(a)); }

    // rotate around the argument of vector p
    point rotate(point p) { return rotate(p.x / p.abs(), p.y / p.abs()); }

};

int direction(point o, point p, point q) { return p.dir(o, q); }

point rotate_ccw90(point p)   { return point(-p.y,p.x); }
point rotate_cw90(point p)    { return point(p.y,-p.x); }

//for reading purposes avoid using * and % operators, use the functions below:
type dot(point p, point q)     { return p.x*q.x + p.y*q.y; }
type cross(point p, point q)   { return p.x*q.y - p.y*q.x; }

//double area
type area_2(point a, point b, point c) { return cross(a,b) + cross(b,c) + cross(c,a); }

int angle_less(const point& a1, const point& b1, const point& a2, const point& b2) {
    //angle between (a1 and b1) vs angle between (a2 and b2)
    //1  : bigger
    //-1 : smaller
    //0  : equal
    point p1(dot(   a1, b1), abs(cross(   a1, b1)));
    point p2(dot(   a2, b2), abs(cross(   a2, b2)));
    if(cross(p1, p2) < 0) return 1;
    if(cross(p1, p2) > 0) return -1;
    return 0;
}

ostream &operator<<(ostream &os, const point &p) {
    os << "(" << p.x << "," << p.y << ")"; 
    return os;
}

point nail[N], poly[N], origin;

int above(point p){
    if(eq(p.y, origin.y)) return !le(p.x, origin.x);
    return !le(p.y, origin.y);
}

bool cmp(pair<point, pii> a, pair<point, pii> b){
    point p = a.st, q = b.st;
    int tmp = above(q) - above(p);
    if(tmp) return tmp > 0;
    if(p.dir(origin, q) == 0) return a.nd.st < b.nd.st;
    return p.dir(origin, q) > 0;
    //Be Careful: p.dir(origin,q) == 0
}

int open[N];

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin >> t;
    while(t--){
        int n, m;
        cin >> n;
        for(int i = 0; i < n; i++){
            cin >> nail[i].x >> nail[i].y;
        }
        cin >> m;
        for(int i = 0; i < m; i++){
            cin >> poly[i].x >> poly[i].y;
        }
        bool ans = true;
        for(int i = 0; i < n; i++){
            bool ok = false;
            origin = nail[i];
            vector<pair<point, pii>> sweep;
            for(int j = 0; j < m; j++){
                point l = poly[j], r = poly[(j + 1)%m];
                //if right point is on its left, swap so right point opens the edge, and left point closes it
                if(l.dir(origin, r) == 1) swap(l, r);
                sweep.push_back({l, {1, j}});
                sweep.push_back({r, {0, j}});
                open[j] = 0;
            }
            sort(sweep.begin(), sweep.end(), cmp);
            int cnt = 0;
            //pass through sweep to see already open edges
            for(auto s : sweep){
                //edge opening
                if(!s.nd.st){
                    open[s.nd.nd] = 1;
                    cnt++;
                }
                //edge closing
                else{
                    //if it was open, reduce cnt value
                    if(open[s.nd.nd]) cnt--;
                    open[s.nd.nd] = 0;
                }
            }
            for(auto s : sweep){
                if(!s.nd.st){
                    open[s.nd.nd] = 1;
                    cnt++;
                }
                else{
                    if(open[s.nd.nd]) cnt--;
                    open[s.nd.nd] = 0;
                }
                if(!cnt){
                    ok = true;
                    break;
                }
            }
            ans &= ok;
        }
        cout << (ans ? "YES\n" : "NO\n");
    }
}